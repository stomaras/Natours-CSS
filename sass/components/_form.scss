.form {

    &__group:not(:last-child) {
        margin-bottom: 2rem;
    }

    /*
        There is something particular to input elements 
        they do not inherit basically the font-properties

        Now another cool thing that we can do is to actually make use of the validation 
        that Google Chrome has. So remember that i told you that here in the email input for example,
        we specified the email type and then google chrome will test if ew are actually writing 
        in a valid email address or not, and if we not,it will basically be invalid and in CSS we can actually use 
        that , because on an input element we can actually use the invalid pseudo-class, and of course also 
        the valid pseudo-class, and then we will specify specific values when the value is valid, or 
        when it's not valid.
    */
    &__input {
        font-size: 1.5rem;
        font-family: inherit;
        padding: 1.5rem 2rem;
        border-radius: 2px;
        background-color: rgba($color-white, .5);
        border: none;
        border-bottom: 3px solid transparent;
        width: 60%;
        display: block;
        
        &:focus {
            outline: none;
            box-shadow: 0 1rem 2rem rgba($color-black, $alpha: .1);
            border-bottom: 3px solid $color-primary;
        }

        /* When the input focus element is invalid */
        &:focus:invalid {
            border-bottom: 3px solid $color-secondary-dark;
        }

        
        &::-webkit-input-placeholder {
            color: $color-grey-dark-2;
        }
    }

    &__label {
        font-size: 1.2rem;
        font-weight: 700;
        margin-left: 2rem;
        margin-top: .7rem;
        display: block;
        transition: all .3s;
    }   

    /* if two elements are both childs of the form group are siblings
       for example input and label. They are both children of this parent element form__group
       but in CSS we have a really powerful selector which is called the sibling selector.
       we use the adjacent sibling selector +  because the sibling is right next to the first element
       if we have more levels among the siblings for example div buttons e.t.c then we still use a 
       sibling selector but we would have to use this one ~ general sibling selector 

    */
    
    &__input:placeholder-shown + &__label {
        opacity: 0;
        visibility: hidden;
        transform: translateY(-4rem);
    }


}